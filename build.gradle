buildscript {
    ext {
        kotlin_version = '1.4.10'

        junit_verions = '5.7.0'
        mockito_core_version='2.24.0'

        spring_boot_version = '2.4.5'
        spring_cloud_version='2020.0.2'
        spring_version = '5.3.6'
        spring_dep_mgn_version='1.0.11.RELEASE'

        commons_io_version='2.8.0'

        maven_repo= System.getenv("MAVEN_PROXY")
        nexus_staging_version = '0.22.0'


    }
    repositories {
        mavenLocal()
        if(maven_repo != null) {
            maven { url maven_repo }
        }
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-snapshot' }
    }
}

plugins {
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version" apply false
    id "org.springframework.boot" version "$spring_boot_version" apply false
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version" apply false
    id "io.spring.dependency-management" version "$spring_dep_mgn_version" apply false
    id "io.codearte.nexus-staging" version "$nexus_staging_version"
}
apply plugin: 'io.codearte.nexus-staging'

static Boolean  isNotNullOrBlank(Object s){
    return !(s == null || s.toString().trim().length() == 0)
}

static canBeSign(Project project) {
    return isNotNullOrBlank(project.findProperty("signing.password")) &&
            isNotNullOrBlank(project.findProperty('signing.secretKeyRingFile')) &&
            isNotNullOrBlank(project.findProperty('signing.keyId'))
}

static getPropertyOrCmdArgs(Project project, String propertyName, String cmdArgName) {
    def propertyValue = project.hasProperty(propertyName) ? project.property(propertyName).toString() : null
    def v = (System.properties.getProperty(cmdArgName) ?: propertyValue ) ?: System.getenv(propertyName)
    return isNotNullOrBlank(v) ? v : null
}

allprojects {
    group 'com.labijie.infra'
    version '1.0.0'

    apply plugin: 'kotlin'
    apply plugin: 'signing'
    apply plugin: 'kotlin-spring'
    apply plugin: 'java-library'
    if(!project.name.startsWith("dummy")) {
        apply plugin: 'maven-publish'
    }

    compileJava.options.encoding = "UTF-8"
    javadoc.options.encoding = "UTF-8"

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError = false
        options.encoding = 'utf-8'
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        if(maven_repo != null) {
            maven { url maven_repo }
        }
        mavenCentral()
    }

    configurations.all {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }


    dependencies {
        implementation platform("org.jetbrains.kotlin:kotlin-bom:${kotlin_version}")
        implementation platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
        implementation platform("org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}")

        implementation "org.jetbrains.kotlin:kotlin-stdlib"
        implementation "org.jetbrains.kotlin:kotlin-reflect"

        testImplementation platform("org.junit:junit-bom:$junit_verions")
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"

        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "org.mockito", module: "mockito-all"
        }

        testImplementation "org.junit.jupiter:junit-jupiter"
        testImplementation("org.jetbrains.kotlin:kotlin-test-junit5"){
            exclude group:"org.junit"
        }

        testImplementation "org.mockito:mockito-core:$mockito_core_version"

    }

    test {
        useJUnitPlatform()
    }
}


subprojects {
    def u = getPropertyOrCmdArgs(project, "PUB_USER", "u")
    def p =getPropertyOrCmdArgs(project, "PUB_PWD", "p")
    def s = getPropertyOrCmdArgs(project, "PUB_URL", "s")

    if(!project.name.startsWith("dummy")) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = "spring-cloud-stream-binder-" + project.name
                    from components.java

                    pom {
                        name = "spring-cloud-stream-binder-simulator" + project.name
                        description = 'simple binder implement for spring cloud stream application'
                        url = 'https://github.com/hongque-pro/infra-spring-cloud-stream'
//                    properties = [
//                            myProp: "value",
//                            "prop.with.dots": "anotherValue"
//                    ]
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'labijie infra team'
                                name = 'infra team'
                                email = 'tech@labijie.com'
                            }
                        }
                        scm {
                            url = 'https://github.com/hongque-pro/infra-spring-cloud-stream'
                            connection = 'scm:git@github.com:hongque-pro/infra-spring-cloud-stream.git'
                            developerConnection = 'git@github.com:hongque-pro/infra-spring-cloud-stream.git'
                        }
                    }
                }
            }

            signing {
                if (canBeSign(project)) {
                    sign publishing.publications.mavenJava
                } else {
                    println "Signing information missing/incomplete for ${project.name}"
                }
            }

            repositories {
                if (isNotNullOrBlank(u) && isNotNullOrBlank(p)) {
                    maven {
                        name = "OSSRH"
                        url = s ?: "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                        credentials {
                            username = u
                            password = p
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    def u = getPropertyOrCmdArgs(project, "PUB_USER", "u")
    def p =getPropertyOrCmdArgs(project, "PUB_PWD", "p")
    username = u
    password = p
    packageGroup = "com.labijie.infra"
}

